---
# Install and configure k6 Load Generator with Prometheus integration

- name: Create k6 user
  user:
    name: k6
    system: yes
    shell: /bin/false
    home: /var/lib/k6
    create_home: yes
  become: yes

- name: Create k6 directories (following monitoring pattern)
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "/opt/k6", owner: "k6", group: "k6", mode: "0755" }
    - { path: "/opt/k6/scripts", owner: "k6", group: "k6", mode: "0755" }
    - { path: "/opt/k6/results", owner: "k6", group: "k6", mode: "0755" }
    - { path: "/opt/k6/logs", owner: "k6", group: "k6", mode: "0755" }
    - { path: "/home/ubuntu/config/k6", owner: "ubuntu", group: "ubuntu", mode: "0755" }
    - { path: "/home/ubuntu/apps/k6", owner: "ubuntu", group: "ubuntu", mode: "0755" }
  become: yes

- name: Check if k6 exists
  stat:
    path: /usr/local/bin/k6
  register: k6_binary

- name: Download k6 (official version with built-in Prometheus support)
  get_url:
    url: "https://github.com/grafana/k6/releases/download/v0.48.0/k6-v0.48.0-linux-amd64.tar.gz"
    dest: /tmp/k6.tar.gz
    mode: '0644'
  become: yes
  when: not k6_binary.stat.exists

- name: Extract k6
  unarchive:
    src: /tmp/k6.tar.gz
    dest: /tmp
    remote_src: yes
  become: yes
  when: not k6_binary.stat.exists

- name: Install k6 binary
  copy:
    src: /tmp/k6-v0.48.0-linux-amd64/k6
    dest: /usr/local/bin/k6
    owner: k6
    group: k6
    mode: '0755'
    remote_src: yes
  become: yes
  when: not k6_binary.stat.exists

- name: Create k6 configuration in organized structure
  copy:
    dest: /home/ubuntu/config/k6/k6-config.json
    content: |
      {
        "thresholds": {
          "http_req_failed": ["rate<0.1"],
          "http_req_duration": ["p(95)<500"]
        }
      }
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  become: yes

- name: Create k6 test scripts
  copy:
    dest: "/home/ubuntu/config/k6/{{ item.name }}"
    content: "{{ item.content }}"
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  loop:
    - name: smoke-test.js
      content: |
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export const options = {
          vus: 1,
          duration: '30s',
          thresholds: {
            http_req_failed: ['rate<0.1'],
            http_req_duration: ['p(95)<500'],
          },
        };

        export default function () {
          const res = http.get('https://api.myce.live/actuator/health');
          check(res, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
    - name: load-test.js
      content: |
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export const options = {
          stages: [
            { duration: '2m', target: 100 },  // Ramp up to 100 users
            { duration: '5m', target: 100 },  // Stay at 100 users
            { duration: '2m', target: 200 },  // Ramp up to 200 users  
            { duration: '5m', target: 200 },  // Stay at 200 users
            { duration: '2m', target: 0 },    // Ramp down to 0 users
          ],
          thresholds: {
            http_req_failed: ['rate<0.1'],
            http_req_duration: ['p(95)<1000'],
          },
        };

        export default function () {
          const res = http.get('https://api.myce.live/actuator/health');
          check(res, {
            'status is 200': (r) => r.status === 200,
          });
          sleep(1);
        }
    - name: stress-test.js
      content: |
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export const options = {
          stages: [
            { duration: '10s', target: 100 },   // Quick ramp to 100
            { duration: '1m', target: 100 },    // Stay at 100 
            { duration: '20s', target: 1000 },  // Spike to 1000 (stress test)
            { duration: '3m', target: 1000 },   // Maintain stress
            { duration: '20s', target: 100 },   // Drop back
            { duration: '1m', target: 100 },    // Recover
            { duration: '10s', target: 0 },     // Ramp down
          ],
          thresholds: {
            http_req_failed: ['rate<0.2'],  // Allow higher failure rate under stress
            http_req_duration: ['p(90)<2000'], // More lenient response time
          },
        };

        export default function () {
          const res = http.get('https://api.myce.live/actuator/health');
          check(res, {
            'status is 200': (r) => r.status === 200,
          });
          sleep(Math.random() * 2); // Random sleep 0-2 seconds
        }
  become: yes

- name: Create symlinks to system locations (following your pattern)
  file:
    src: "/home/ubuntu/config/k6/{{ item }}"
    dest: "/opt/k6/scripts/{{ item }}"
    state: link
    owner: k6
    group: k6
  loop:
    - smoke-test.js
    - load-test.js
    - stress-test.js
  become: yes

- name: Create k6 helper script
  copy:
    dest: /usr/local/bin/k6-run
    content: |
      #!/bin/bash
      # Helper script to run k6 tests with Prometheus output
      # Usage: k6-run <script.js> [prometheus_url]

      set -e

      SCRIPT_FILE=${1:-smoke-test.js}
      PROMETHEUS_URL=${2:-"http://localhost:9090"}
      TEST_ID=$(date +%Y%m%d-%H%M%S)

      if [ ! -f "/opt/k6/scripts/$SCRIPT_FILE" ]; then
          echo "Error: Script not found: $SCRIPT_FILE"
          echo "Available scripts:"
          ls -1 /opt/k6/scripts/
          exit 1
      fi

      echo "üöÄ Running k6 test: $SCRIPT_FILE"
      echo "üìä Prometheus URL: $PROMETHEUS_URL" 
      echo "üè∑Ô∏è  Test ID: $TEST_ID"
      echo "----------------------------------------"

      cd /opt/k6
      k6 run \
        -o experimental-prometheus-rw \
        --tag testid=$TEST_ID \
        --tag instance=$(hostname) \
        --tag environment=load-test \
        scripts/$SCRIPT_FILE
    owner: root
    group: root
    mode: '0755'
  become: yes

- name: Create k6 systemd service (optional, for service-based runs)
  copy:
    dest: /etc/systemd/system/k6.service
    content: |
      [Unit]
      Description=k6 Load Testing Service
      After=network-online.target

      [Service]
      Type=simple
      User=k6
      Group=k6
      WorkingDirectory=/opt/k6
      ExecStart=/usr/local/bin/k6-run smoke-test.js
      Restart=no
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: Enable k6 service (but don't start - we run manually)
  systemd:
    name: k6
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Clean up k6 download files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/k6.tar.gz
    - /tmp/k6-v0.48.0-linux-amd64
  become: yes

- name: Display k6 installation info
  debug:
    msg:
      - "‚úÖ k6 with Prometheus extension installed successfully!"
      - "üìç Location: /usr/local/bin/k6" 
      - "üìÅ Scripts: /opt/k6/scripts/"
      - "üîß Helper: k6-run <script.js>"
      - "üìä Test with: k6-run smoke-test.js"